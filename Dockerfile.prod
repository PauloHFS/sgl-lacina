# Stage 1: PHP Base - Installs PHP, extensions, and Composer dependencies
FROM php:8.4-fpm-alpine AS php_base

WORKDIR /var/www/html

# Install system dependencies for PHP extensions and common tools
RUN apk update && apk add --no-cache \
  git \
  curl \
  zip \
  unzip \
  $PHPIZE_DEPS \
  postgresql-dev \
  libzip-dev \
  icu-dev \
  libpng-dev \
  libjpeg-turbo-dev \
  freetype-dev \
  libwebp-dev \
  linux-headers \
  && docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
  && docker-php-ext-install -j$(nproc) \
  bcmath \
  exif \
  gd \
  intl \
  opcache \
  pcntl \
  pdo_pgsql \
  pgsql \
  sockets \
  zip \
  && apk del --purge $PHPIZE_DEPS

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy composer files and install dependencies
COPY composer.json composer.lock ./
RUN composer install --no-interaction --no-dev --no-scripts --prefer-dist --optimize-autoloader

# Copy the rest of the application code
COPY . .

# Run composer scripts
RUN composer run-script post-autoload-dump --no-dev

# Stage 2: Frontend Asset Builder
FROM node:lts-alpine AS frontend_builder

WORKDIR /app

COPY package.json package-lock.json ./
RUN npm install

COPY resources ./resources
COPY vite.config.js .
COPY tailwind.config.js .
COPY postcss.config.js .
COPY tsconfig.json .

RUN npm run build

# Stage 3: Final Production Image
FROM php:8.4-fpm-alpine AS production_app

WORKDIR /var/www/html

# Set production environment variables
ENV APP_ENV=production \
  PHP_OPCACHE_ENABLE=1 \
  PHP_OPCACHE_ENABLE_CLI=1 \
  PHP_OPCACHE_MEMORY_CONSUMPTION=128 \
  PHP_OPCACHE_INTERNED_STRINGS_BUFFER=8 \
  PHP_OPCACHE_MAX_ACCELERATED_FILES=10000 \
  PHP_OPCACHE_REVALIDATE_FREQ=0 \
  PHP_OPCACHE_VALIDATE_TIMESTAMPS=0

# Install runtime dependencies
RUN apk update && apk add --no-cache \
  libzip \
  icu \
  libpng \
  libjpeg-turbo \
  freetype \
  libwebp \
  postgresql-libs

# Copy PHP extensions and configurations
COPY --from=php_base /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/
COPY --from=php_base /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/

# Copy application code
COPY --from=php_base /var/www/html /var/www/html

# Copy built frontend assets
COPY --from=frontend_builder /app/public/build ./public/build

# Create entrypoint script
COPY docker/prod/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Set ownership and permissions
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache && \
  chmod -R ug+rwx /var/www/html/storage /var/www/html/bootstrap/cache

# Clean up
RUN rm -rf /var/cache/apk/*

EXPOSE 9000

CMD ["/usr/local/bin/entrypoint.sh"]